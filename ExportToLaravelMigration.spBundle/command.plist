<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>author</key>
	<string>Colin Viebrock</string>
	<key>category</key>
	<string>Export</string>
	<key>command</key>
	<string>
# Remove temp files
rm -f "$SP_QUERY_RESULT_FILE"
rm -f "$SP_QUERY_FILE"
rm -f "$SP_QUERY_RESULT_STATUS_FILE"

# Check if one table is selected
if [ -z "$SP_SELECTED_TABLE" ]; then
	echo "&lt;font color=red&gt;Please select a table.&lt;/font&gt;"
	exit $SP_BUNDLE_EXIT_SHOW_AS_HTML_TOOLTIP
fi

# send DESCRIBE query to Sequel Pro
cat &lt;&lt;SQL &gt; "$SP_QUERY_FILE"
DESCRIBE ${SP_SELECTED_TABLE}
SQL

# execute the SQL statement; the result will be available in the file $SP_QUERY_RESULT_FILE
open "sequelpro://$SP_PROCESS_ID@passToDoc/ExecuteQuery"

# wait for Sequel Pro; status file will be written to disk if query was finished
while [ 1 ]
do
	[[ -e "$SP_QUERY_RESULT_STATUS_FILE" ]] &amp;&amp; break
	sleep 0.01
done

# check for errors
if [ `cat $SP_QUERY_RESULT_STATUS_FILE` == 1 ]; then
	echo "Query error."
	exit $SP_BUNDLE_EXIT_SHOW_AS_HTML_TOOLTIP
fi

# save the DESCRIBE result
cp $SP_QUERY_RESULT_FILE "$SP_BUNDLE_PATH/rowsStructure.tsv"


# Remove temp files
rm -f "$SP_QUERY_RESULT_FILE"
rm -f "$SP_QUERY_FILE"
rm -f "$SP_QUERY_RESULT_STATUS_FILE"

# send SHOW INDEXES query to Sequel Pro
cat &lt;&lt;SQL &gt; "$SP_QUERY_FILE"
SHOW INDEXES FROM ${SP_SELECTED_TABLE}
SQL

# execute the SQL statement; the result will be available in the file $SP_QUERY_RESULT_FILE
open "sequelpro://$SP_PROCESS_ID@passToDoc/ExecuteQuery"

# wait for Sequel Pro; status file will be written to disk if query was finished
while [ 1 ]
do
	[[ -e "$SP_QUERY_RESULT_STATUS_FILE" ]] &amp;&amp; break
	sleep 0.01
done

# check for errors
if [ `cat $SP_QUERY_RESULT_STATUS_FILE` == 1 ]; then
	echo "Query error."
	exit $SP_BUNDLE_EXIT_SHOW_AS_HTML_TOOLTIP
fi

# save the SHOW INDEXES result
cp $SP_QUERY_RESULT_FILE "$SP_BUNDLE_PATH/rowsKeys.tsv"

# Remove temp files
rm -f "$SP_QUERY_RESULT_FILE"
rm -f "$SP_QUERY_FILE"
rm -f "$SP_QUERY_RESULT_STATUS_FILE"

# check if CONSTRAINTS exists
cat &lt;&lt;SQL &gt; "$SP_QUERY_FILE"
SELECT count(kcu.CONSTRAINT_NAME)
FROM
  INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc
LEFT JOIN
  INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu
ON
  (rc.CONSTRAINT_NAME=kcu.CONSTRAINT_NAME)
WHERE
   rc.TABLE_NAME = '${SP_SELECTED_TABLE}';
SQL

# execute the SQL statement; the result will be available in the file $SP_QUERY_RESULT_FILE
open "sequelpro://$SP_PROCESS_ID@passToDoc/ExecuteQuery"

# wait for Sequel Pro; status file will be written to disk if query was finished
while [ 1 ]
do
	[[ -e "$SP_QUERY_RESULT_STATUS_FILE" ]] &amp;&amp; break
	sleep 0.01
done

# check for errors
if [ `cat $SP_QUERY_RESULT_STATUS_FILE` > 0 ]; then
	# Remove temp files
	rm -f "$SP_QUERY_RESULT_FILE"
	rm -f "$SP_QUERY_FILE"
	rm -f "$SP_QUERY_RESULT_STATUS_FILE"

	# send CONSTRAINTS query to Sequel Pro
	cat &lt;&lt;SQL &gt; "$SP_QUERY_FILE"
SELECT
  kcu.CONSTRAINT_NAME, kcu.COLUMN_NAME, kcu.REFERENCED_TABLE_NAME, kcu.REFERENCED_COLUMN_NAME, rc.UPDATE_RULE, rc.DELETE_RULE
FROM
  INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc
LEFT JOIN
  INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu
ON
  (rc.CONSTRAINT_NAME=kcu.CONSTRAINT_NAME)
WHERE
   rc.TABLE_NAME = '${SP_SELECTED_TABLE}';
SQL

	# execute the SQL statement; the result will be available in the file $SP_QUERY_RESULT_FILE
	open "sequelpro://$SP_PROCESS_ID@passToDoc/ExecuteQuery"

	# wait for Sequel Pro; status file will be written to disk if query was finished
	while [ 1 ]
	do
		[[ -e "$SP_QUERY_RESULT_STATUS_FILE" ]] &amp;&amp; break
		sleep 0.01
	done

	# check for errors
	if [ `cat $SP_QUERY_RESULT_STATUS_FILE` == 1 ]; then
		echo "3 Query error."
		exit $SP_BUNDLE_EXIT_SHOW_AS_HTML_TOOLTIP
	fi

	# save the CONSTRAINTS result
	cp $SP_QUERY_RESULT_FILE "$SP_BUNDLE_PATH/rowsConstraints.tsv"
else
	echo -n "" &gt; "$SP_BUNDLE_PATH/rowsConstraints.tsv"
fi

# process the results and save to the desktop
FILENAME=$(date "+%Y_%m_%d_%H%M%S_create_${SP_SELECTED_TABLE}_table.php")
/usr/bin/php "$SP_BUNDLE_PATH/parse.php" "${SP_SELECTED_TABLE}" &gt; ~/Desktop/$FILENAME
echo "Migration saved to ~/Desktop/$DATAFILENAME."

# Remove temp files
rm -f "$SP_QUERY_RESULT_FILE"
rm -f "$SP_QUERY_FILE"
rm -f "$SP_QUERY_RESULT_STATUS_FILE"
</string>
	<key>contact</key>
	<string>uggcf://tvguho.pbz/pivroebpx/RkcbegGbYneniryZvtengvba.fcOhaqyr</string>
	<key>description</key>
	<string>Exports the selected table to a Laravel migration file on the desktop.</string>
	<key>keyEquivalent</key>
	<string>^~@m</string>
	<key>name</key>
	<string>Export To Laravel Migration</string>
	<key>output</key>
	<string>showastexttooltip</string>
	<key>scope</key>
	<string>general</string>
	<key>tooltip</key>
	<string>Export the selected table to Laravel migration file on the Desktop</string>
	<key>uuid</key>
	<string>BAAD749B-F050-4F02-879C-333B581D2E23</string>
</dict>
</plist>
